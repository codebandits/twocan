var_sources:
  - name: vars
    type: dummy
    config:
      vars:
        node-version: "15-alpine" # https://hub.docker.com/_/node
        jdk-version: "16-slim" # https://hub.docker.com/_/openjdk
        alpine-version: "3.13.5" # https://alpinelinux.org/downloads/
        kaniko-version: "v1.6.0-debug" # https://git.io/JOEAf

resource_types:
  - name: bundle
    type: docker-image
    source:
      repository: us-docker.pkg.dev/tools-275701/codebandits/bundle-resource
      tag: latest

resources:
  - name: source
    type: git
    source:
      branch: main
      private_key: ((pipeline.git-private-key))
      uri: ((pipeline.git-repository))
      git_crypt_key: ((pipeline.git-crypt-key))
    check_every: 24h
    webhook_token: ((pipeline.git-webhook-token))
  - name: alpine-image
    type: registry-image
    source:
      repository: alpine
      tag: ((vars:alpine-version))
  - name: node-image
    type: registry-image
    source:
      repository: node
      tag: ((vars:node-version))
  - name: jdk-image
    type: registry-image
    source:
      repository: openjdk
      tag: ((vars:jdk-version))
  - name: kaniko-executor-image
    type: registry-image
    source:
      repository: gcr.io/kaniko-project/executor
      tag: ((vars:kaniko-version))
  - name: k8s-gcp-runner-image
    type: registry-image
    source:
      repository: us-central1-docker.pkg.dev/tools-275701/twocan/pipeline/k8s-gcp-runner
      tag: latest
      username: _json_key
      password: ((pipeline.gcp-service-account-registry))
  - name: yml-runner-image
    type: registry-image
    source:
      repository: us-central1-docker.pkg.dev/tools-275701/twocan/pipeline/yml-runner
      tag: latest
      username: _json_key
      password: ((pipeline.gcp-service-account-registry))
  - name: frontend-image
    type: registry-image
    source:
      repository: us-central1-docker.pkg.dev/tools-275701/twocan/frontend
      tag: latest
      username: _json_key
      password: ((pipeline.gcp-service-account-registry))
  - name: server-image
    type: registry-image
    source:
      repository: us-central1-docker.pkg.dev/tools-275701/twocan/server
      tag: latest
      username: _json_key
      password: ((pipeline.gcp-service-account-registry))
  - name: twocan-build
    type: bundle
    source:
      registry: us-central1-docker.pkg.dev
      repository: tools-275701/twocan/build
      username: _json_key
      password: ((pipeline.gcp-service-account-registry))

groups:
  - name: main
    jobs:
      - build-twocan
      - acceptance
      - production
  - name: pipeline
    jobs:
      - yml-runner
      - k8s-gcp-runner

jobs:
  - name: yml-runner
    serial: true
    plan:
      - in_parallel:
          - get: source
          - get: alpine-image
          - get: kaniko-executor-image
      - task: build-yml-runner-image
        image: kaniko-executor-image
        file: source/pipeline/tasks/build-image.yml
        params:
          context_path: pipeline/images/yml-runner
        output_mapping:
          image: yml-runner-image
      - put: yml-runner-image
        params:
          image: yml-runner-image/image.tar
  - name: k8s-gcp-runner
    serial: true
    plan:
      - in_parallel:
          - get: source
          - get: alpine-image
          - get: kaniko-executor-image
      - task: build-k8s-gcp-runner-image
        image: kaniko-executor-image
        file: source/pipeline/tasks/build-image.yml
        params:
          context_path: pipeline/images/k8s-gcp-runner
        output_mapping:
          image: k8s-gcp-runner-image
      - put: k8s-gcp-runner-image
        params:
          image: k8s-gcp-runner-image/image.tar
  - name: build-twocan
    serial: true
    plan:
      - in_parallel:
          - get: source
          - get: node-image
          - get: jdk-image
          - get: kaniko-executor-image
          - get: alpine-image
          - get: yml-runner-image
      - in_parallel:
          - do:
              - task: build-environments
                image: yml-runner-image
                file: source/pipeline/tasks/build-environments.yml
          - do:
              - task: build-frontend
                image: node-image
                file: source/pipeline/tasks/build-frontend.yml
                output_mapping:
                  build: frontend-build
              - task: build-frontend-image
                image: kaniko-executor-image
                file: source/pipeline/tasks/build-image.yml
                input_mapping:
                  source: frontend-build
                output_mapping:
                  image: frontend-image
              - put: frontend-image
                params:
                  image: frontend-image/image.tar
          - do:
              - task: build-server
                image: jdk-image
                file: source/pipeline/tasks/build-server.yml
                output_mapping:
                  build: server-build
              - task: build-server-image
                image: kaniko-executor-image
                file: source/pipeline/tasks/build-image.yml
                input_mapping:
                  source: server-build
                output_mapping:
                  image: server-image
              - put: server-image
                params:
                  image: server-image/image.tar
      - put: twocan-build
        params:
          path: environments
  - name: acceptance
    plan:
      - in_parallel:
          - get: k8s-gcp-runner-image
          - get: twocan-build
            passed:
              - build-twocan
      - task: deploy
        image: k8s-gcp-runner-image
        input_mapping:
          build: twocan-build
        params:
          CONTEXT: torrio
          KUBECONFIG_FILE: ((pipeline.kubeconfig))
          GCP_SERVICE_ACCOUNT_FILE: ((pipeline.gcp-service-account-k8s))
        config:
          platform: linux
          inputs:
            - name: build
          run:
            path: entrypoint.sh
            args:
              - sh
              - -ecu
              - |
                kapp deploy \
                    --namespace apps \
                    --app twocan-acceptance \
                    --yes \
                    -f build/acceptance.yml
  - name: production
    plan:
      - in_parallel:
          - get: k8s-gcp-runner-image
          - get: twocan-build
            passed:
              - acceptance
      - task: deploy
        image: k8s-gcp-runner-image
        input_mapping:
          build: twocan-build
        params:
          CONTEXT: capone
          KUBECONFIG_FILE: ((pipeline.kubeconfig))
          GCP_SERVICE_ACCOUNT_FILE: ((pipeline.gcp-service-account-k8s))
        config:
          platform: linux
          inputs:
            - name: build
          run:
            path: entrypoint.sh
            args:
              - sh
              - -ecu
              - |
                kapp deploy \
                    --namespace apps \
                    --app twocan-production \
                    --yes \
                    -f build/production.yml
