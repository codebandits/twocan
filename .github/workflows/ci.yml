name: CI
on:
  push:
    branches:
      - main
env:
  GCP_PROJECT: distribrewtion-201323
  REGISTRY: us-central1-docker.pkg.dev/distribrewtion-201323/twocan
  REGISTRY_USERNAME: _json_key
  REGISTRY_PASSWORD: ${{ secrets.GCP_KEY }}
jobs:
  version:
    name: Create Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Create Version
        uses: ./.github/actions/create-version
        id: version
        with:
          bucket: build-versions
          name: twocan
          gcp_project: ${{ env.GCP_PROJECT }}
          gcp_service_account_key: ${{ secrets.GCP_KEY }}
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    needs:
      - version
    outputs:
      digest: ${{ steps.push.outputs.digest }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.4.1
        with:
          node-version: 15.x
          check-latest: true
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        working-directory: frontend
        run: npm install
      - name: Run tests
        working-directory: frontend
        run: npm test
      - name: Build
        working-directory: frontend
        run: npm run build
      - name: Prepare Container Artiacts
        run: |
          mkdir build-frontend-container
          cp -a frontend/build build-frontend-container/build
          cp -a frontend/Dockerfile build-frontend-container/
          cp -a frontend/nginx.conf build-frontend-container/
      - name: Build and Push Frontend Container
        uses: ./.github/actions/build-push
        id: push
        with:
          registry: ${{ env.REGISTRY }}
          image: frontend
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
          context: build-frontend-container
          version: ${{ needs.version.outputs.version }}
  server:
    name: Server
    runs-on: ubuntu-latest
    needs:
      - version
    outputs:
      digest: ${{ steps.push.outputs.digest }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Setup Java environment
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 11
          check-latest: true
          cache: gradle
      - name: Run tests
        run: ./gradlew test
      - name: Build
        run: ./gradlew :server:shadowJar
      - name: Prepare Container Artiacts
        run: |
          mkdir build-server-container
          cp -a server/build/libs/twocan.server.jar build-server-container/app.jar
          cp -a server/Dockerfile build-server-container/
      - name: Build and Push Server Container
        uses: ./.github/actions/build-push
        id: push
        with:
          registry: ${{ env.REGISTRY }}
          image: server
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
          context: build-server-container
          version: ${{ needs.version.outputs.version }}
  build:
    name: Publish Build
    runs-on: ubuntu-latest
    needs:
      - version
      - frontend
      - server
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Unlock secrets
        uses: sliteteam/github-action-git-crypt-unlock@1.2.0
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}
      - name: Install Kustomize
        uses: engineerd/configurator@v0.0.8
        with:
          name: kustomize
          url: https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.4.0/kustomize_v4.4.0_linux_amd64.tar.gz
          pathInArchive: kustomize
      - name: Install Carvel Tools
        uses: vmware-tanzu/carvel-setup-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          only: kbld, imgpkg
      - name: Create Build
        env:
          KBLD_REGISTRY_HOSTNAME: ${{ env.REGISTRY }}
          KBLD_REGISTRY_USERNAME: ${{ env.REGISTRY_USERNAME }}
          KBLD_REGISTRY_PASSWORD: ${{ env.REGISTRY_PASSWORD }}
          IMGPKG_REGISTRY_HOSTNAME: ${{ env.REGISTRY }}
          IMGPKG_REGISTRY_USERNAME: ${{ env.REGISTRY_USERNAME }}
          IMGPKG_REGISTRY_PASSWORD: ${{ env.REGISTRY_PASSWORD }}
        run: |
          set -euo pipefail
          version=${{ needs.version.outputs.version }}
          frontend_digest=${{ needs.frontend.outputs.digest }}
          frontend_image=${{ env.REGISTRY }}/frontend@$frontend_digest
          server_digest=${{ needs.server.outputs.digest }}
          server_image=${{ env.REGISTRY }}/server@$server_digest
          mapping_dir=$(mktemp -d)
          build_dir=$(mktemp -d)

          jq -n \
            --arg frontend_image $frontend_image \
            --arg server_image $server_image \
            '{"twocan/frontend": $frontend_image, "twocan/server": $server_image}' \
            > $mapping_dir/relocation-mapping.json
          for environment in $(find deployment/environments -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
          do
            kustomize build deployment/environments/"$environment" \
              | kbld --image-map-file $mapping_dir/relocation-mapping.json -f - > "$build_dir"/"$environment".yml
          done

          mkdir -p "$build_dir"/.imgpkg
          cat "$build_dir"/*.yml | kbld -f - --imgpkg-lock-output "$build_dir"/.imgpkg/images.yml  > /dev/null
          imgpkg push -b "${{ env.REGISTRY }}"/build:v"$version" -f "$build_dir"
  deploy-e2e:
    name: Deploy E2E
    runs-on: ubuntu-latest
    needs:
      - version
      - build
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Deploy E2E
        uses: ./.github/actions/deploy-build
        with:
          app: twocan
          environment: e2e
          version: ${{ needs.version.outputs.version }}
          registry: ${{ env.REGISTRY }}
          image: build
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
          cluster: farfalle
          gcp_project: ${{ env.GCP_PROJECT }}
          gcp_service_account_key: ${{ secrets.GCP_KEY }}
          gcp_region: us-central1
          github_token: ${{ secrets.GITHUB_TOKEN }}
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    container: cypress/browsers:node14.17.0-chrome88-ff89
    needs:
      - deploy-e2e
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Run tests on Chrome desktop
        uses: cypress-io/github-action@v2
        with:
          working-directory: e2e
          wait-on: https://e2e.twocan.io
          wait-on-timeout: 30
          browser: chrome
          spec: cypress/integration/*
          config: |
            baseUrl=https://e2e.twocan.io
      - name: Run tests on Chrome mobile
        uses: cypress-io/github-action@v2
        with:
          working-directory: e2e
          wait-on: https://e2e.twocan.io
          wait-on-timeout: 30
          browser: chrome
          spec: cypress/integration/*
          config: |
            baseUrl=https://e2e.twocan.io
            viewportWidth=375
            viewportHeight=667
  teardown-e2e:
    name: Teardown E2E
    runs-on: ubuntu-latest
    needs:
      - deploy-e2e
      - e2e
    if: always()
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Teardown E2E
        uses: ./.github/actions/teardown-build
        with:
          app: twocan
          environment: e2e
          cluster: farfalle
          gcp_project: ${{ env.GCP_PROJECT }}
          gcp_service_account_key: ${{ secrets.GCP_KEY }}
          gcp_region: us-central1
          github_token: ${{ secrets.GITHUB_TOKEN }}
  deploy-acceptance:
    name: Deploy Acceptance
    runs-on: ubuntu-latest
    needs:
      - version
      - build
      - e2e
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Deploy E2E
        uses: ./.github/actions/deploy-build
        with:
          app: twocan
          environment: acceptance
          version: ${{ needs.version.outputs.version }}
          registry: ${{ env.REGISTRY }}
          image: build
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
          cluster: farfalle
          gcp_project: ${{ env.GCP_PROJECT }}
          gcp_service_account_key: ${{ secrets.GCP_KEY }}
          gcp_region: us-central1
          github_token: ${{ secrets.GITHUB_TOKEN }}
  slack-notification:
    name: Slack Notificaiton
    runs-on: ubuntu-latest
    needs:
      - version
      - frontend
      - server
      - build
      - e2e
      - deploy-acceptance
    if: always()
    steps:
      - name: Create message
        id: create-message
        shell: bash
        run: |
          set -euo pipefail

          version=${{ needs.version.outputs.version }}
          version_result=${{ needs.version.result }}
          frontend_result=${{ needs.frontend.result }}
          server_result=${{ needs.server.result }}
          build_result=${{ needs.build.result }}
          e2e_result=${{ needs.e2e.result }}
          deploy_acceptance_result=${{ needs.deploy-acceptance.result }}

          github_actions_run_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
          message_file=$(mktemp -d)/message.txt
          touch $message_file

          function processIfMessage {
            if [ -s $message_file ]
            then
              echo ::group::Setting message
              echo "[View Run]($github_actions_run_url)" >> $message_file
              message=$(cat $message_file)
              echo Message is
              echo $message
              echo ::endgroup::

              echo ::set-output name=message::$message
              exit
            fi
          }

          if [ $version_result != 'success' ]
          then
            echo "❌ Failed to create new version (job $version_result)." >> $message_file
          fi

          processIfMessage

          if [ $frontend_result = 'success' ]
          then
            echo "✅ Twocan v$version frontend built." >> $message_file
          else
            echo "❌ Twocan v$version frontend $frontend_result." >> $message_file
          fi

          if [ $server_result = 'success' ]
          then
            echo "✅ Twocan v$version server built." >> $message_file
          else
            echo "❌ Twocan v$version server $frontend_result." >> $message_file
          fi

          if [ $build_result = 'success' ]
          then
            echo "✅ Twocan v$version build created." >> $message_file
          else
            echo "❌ Twocan v$version build $frontend_result." >> $message_file
          fi

          if [ $e2e_result = 'success' ]
          then
            echo "✅ Twocan v$version passed E2E tests." >> $message_file
          else
            echo "❌ Twocan v$version E2E tests $frontend_result." >> $message_file
          fi

          if [ $deploy_acceptance_result = 'success' ]
          then
            echo "🚀 Twocan v$version deployed to acceptance." >> $message_file
          else
            echo "❌ Twocan v$version deploy to acceptance $frontend_result." >> $message_file
          fi

          processIfMessage
      - name: Slack
        id: slack
        uses: slackapi/slack-github-action@v1.16.0
        with:
          channel-id: '#test-notifications'
          slack-message: ${{ steps.create-message.outputs.message }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
